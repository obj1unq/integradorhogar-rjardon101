import habitaciones.*

describe "test de habitaciones"{


//*********** OBJETOS PUNTO 1 *************

//una persona de 37 años sin habilidades de cocina (para el ultimo punto del examen es Sencillo) 
	var leo = new Persona (edad= 37, tieneHabilidadDeCocina=false)

//una persona de 29 anios con habilidades de cocina (para el ultimo punto del examen es Obsesiva)
	var andrea = new Persona (edad= 29, tieneHabilidadDeCocina=true)

//una persona de 3 anios sin habilidades de cocina (para el ultimo punto del examen es Golosa)
	var milena = new Persona (edad= 3, tieneHabilidadDeCocina=false)

//una habitacion de uso general
	var comedor = new Habitacion()

//un banio	
	var banioPrincipal = new Banio()
	
//un dormitorio cuyos duenios son andrea y leo
	var dormitorioMatrimonial = new Dormitorio(duenios= #{leo, andrea})

//una cocina de 10 metros cuadrados
	var cocinaPlantaBaja  = new Cocina(mCuadrados = 10)

//***********OBJETOS TEST PUNTO 2****************/
	
	
		//Un banio con un ocupante: milena 
		var banioConMenor = new Banio(ocupantes = #{milena})
		
		//Un banio con un ocupante: andrea 
		var banioConMayor = new Banio(ocupantes = #{andrea})

		//un dormitorio con dos ocupantes: ley y andrea. Los duenios son leo y andrea. 
		var dormitorioMatrimonialOcupado = new Dormitorio(ocupantes= #{leo, andrea}, duenios= #{leo, andrea})
		
		//un dormitorio con andrea como ocupante cuyos duenios leo y andrea
		var dormitorioMatrimonialOcupadoConAndrea = new Dormitorio(ocupantes= #{andrea}, duenios= #{leo, andrea})
		
		//un dormitorio con andrea como ocupante, cuya duenia es milena
		var dormitorioMilenaOcupadoConAndrea  = new Dormitorio(duenios= #{milena}, ocupantes= #{andrea})

		//una cocina con andrea como ocupante, 10 de superficie
		var cocinaOcupadaConAndrea = new Cocina(mCuadrados = 10, ocupantes= #{andrea})

		//una cocina con leo como ocupante, 10 de superficie
		var cocinaOcupadaConLeo  = new Cocina(mCuadrados = 10, ocupantes= #{leo})
		
////***********OBJETOS TEST PUNTO 3****************/


	//una casa que tiene 4 habitaciones: banioPrincipal , dormitorioMatrimonial, cocinaPlantaBaja, comedor
	var casaFlia = new Casa (habitaciones= #{banioPrincipal , dormitorioMatrimonial, cocinaPlantaBaja, comedor})

	//Una familia cuyos miembros son leo, andrea y milena. La casa es: casaFlia.	
	//Recordar que Leo es sencillo, Andrea obsesiva y Milena golosa
	var familia	= new Familia (casa= casaFlia, miembros= #{leo, andrea, milena})
	
	
	

//************TESTS PUNTO 1************

		//por que es un mensaje distinto para el comedor que para las otras habitaciones?
	test "confort uso general" {
		assert.equals(10, comedor.confort())
		assert.equals(10, comedor.confort() )
		assert.equals(10, comedor.confort())
		
	}
	
	test "confort banio" {
		//TODO: tiene nombre de orden pero es un consulta
		assert.equals(14, leo.usarHabitacion(banioPrincipal))	
		assert.equals(14, andrea.usarHabitacion(banioPrincipal))	
		assert.equals(12, milena.usarHabitacion(banioPrincipal))		
	}

	test "confort dormitorio" {
		assert.equals(15, leo.usarHabitacion(dormitorioMatrimonial))
		assert.equals(15, andrea.usarHabitacion(dormitorioMatrimonial))
		assert.equals(10, milena.usarHabitacion(dormitorioMatrimonial))		
	}

	test "confort cocina" {
		assert.equals(10, leo.usarHabitacion(cocinaPlantaBaja))
		assert.equals(11, andrea.usarHabitacion(cocinaPlantaBaja))
		assert.equals(10, milena.usarHabitacion(cocinaPlantaBaja))			
	
		
//		//TODO! reconfigurar para que el porcentaje de la superficie
//		//usado para puntos extras sea un 20%
//		
		porcentajeDeCocina.porcentaje(0.20) 
		assert.equals(12, andrea.usarHabitacion(cocinaPlantaBaja))		

	}
	
	

//************TESTS PUNTO 2.1************
	
	test "puede entrar habitaciones vacias" {
		
		assert.that(comedor.puedeEntrar(leo))
		assert.that(dormitorioMatrimonial.puedeEntrar(leo))
		assert.that(banioPrincipal.puedeEntrar(leo))
		assert.that(cocinaPlantaBaja.puedeEntrar(leo))
	}
	
	
		
	test "puede entrar banio ocupado" {
		assert.that(banioConMenor.puedeEntrar(leo)) 
		assert.notThat(banioConMayor.puedeEntrar(leo))	
	}
	
	test "puede entrar dormitorio" {
		//REALMENTE NO ENTIENDO PORQUE ESTE TEST Y EL SIGUIENTE ME DAN EN AZUL
		assert.that(dormitorioMatrimonialOcupadoConAndrea.puedeEntrar(leo)) //es duenio
		assert.notThat(dormitorioMatrimonialOcupadoConAndrea.puedeEntrar(milena)) //faltan duenios
		assert.that(dormitorioMatrimonialOcupado.puedeEntrar(milena)) //estan los duenios
		
	}

	test "puede entrar cocina con alguien que sabe cocinar" {
		assert.that(cocinaOcupadaConAndrea.puedeEntrar(leo) )
		
		//HACER QUE leo adquiera habilidades de cocina 
		leo.invertirHabilidad()
		
		assert.notThat(cocinaOcupadaConAndrea.puedeEntrar(leo))	
	}

	test "puede entrar cocina con alguien que no sabe cocinar" {
		assert.that(cocinaOcupadaConLeo.puedeEntrar(andrea))
		assert.that(cocinaOcupadaConLeo.puedeEntrar(milena))
	}
	
	
//Test punto 2.2 y 2.3

	test "andrea y milena entrando y saliendo de cuartos" {
			
		// HACER que milena entre a banioPrincipal
		banioPrincipal.entrarAHabitacion(milena)
		assert.equals(banioPrincipal.ocupantes(), #{milena})

		// HACER que andrea entre a dormitorioMatrimonial		
		dormitorioMatrimonial.entrarAHabitacion(andrea)
		assert.equals(dormitorioMatrimonial.ocupantes(), #{andrea})
		
		
 		//HACER que milena entre al dormitorio principal, cosa que no puede porque no es dueña
		banioPrincipal.entrarAHabitacion(milena)
		assert.equals(banioPrincipal.ocupantes(), #{milena})
		
		
		// HACER que andrea entre a banioPrincipal		
		banioPrincipal.entrarAHabitacion(andrea)
		assert.equals(banioPrincipal.ocupantes(), #{andrea})
		
 		assert.notThat(banioPrincipal.entrarAHabitacion(andrea))		
		
	} 

//************Test punto 3*************
	
	test "habitaciones ocupadas, personas responsables, confort promedio y familia a gusto" {
		//HACER que leo entre a dormitorioMatrimonial
		//HACER que andrea entre a cocinaPlantaBaja 
		
		dormitorioMatrimonial.entrarAHabitacion(leo)
		cocinaPlantaBaja.entrarAHabitacion(andrea)
		
		//punto 3.1
		assert.equals(#{dormitorioMatrimonial,cocinaPlantaBaja}, casaFlia.habitacionesOcupadas())		
		//punto 3.2
		assert.equals(#{leo,andrea}, familia.responsable())	
		//punto 3.3
	assert.equals(47, familia.promedioDeConfort())	
		//punto 3.4
		assert.that(familia.estaAGusto())
	}
 



}

